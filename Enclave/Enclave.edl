enclave {
    from "sgx_tstdc.edl" import *;

	/*from "BasicOperations.edl" import *; */
	include "sgx_trts.h"
	include "sgx_tcrypto.h"
		
    trusted {
        /* define ECALLs here. */
		public void ecall_sum_array([in, out, count=size] int *arr,size_t size, [in,out]int * result);
		/*public void ecall_generate_ecc_key_pair([in,out] sgx_ec256_public_t * pPublic);*/
		public void ecall_test([in,out] sgx_ec256_private_t * pPrivate, [in,out] sgx_ec256_public_t * pPublic,[in,out]  sgx_ecc_state_handle_t *handle);
		public void ecall_ECDSAsignMessage([in,out] sgx_ec256_private_t *p_private,[in,out] sgx_ecc_state_handle_t * ecc_handle,[in,out] sgx_ec256_signature_t *p_signature);
		public void ecall_ECDSAverifyMessage([in,out] sgx_ec256_public_t *p_public,[in,out] sgx_ec256_signature_t *p_signature,[in,out] sgx_ecc_state_handle_t * ecc_handle);
		/* to be deleted */
		public void ecall_sum_values([in,out] int arr[5], [in,out] int * result);
		public void enclaveChangeBuffer([out,size=len]char * buf, size_t len);
		public void enclaveStringSave([in, size=len]char * input, size_t len);
		public int enclaveLoadInt();
		public void setSecretValue([in,out] int * value);

    };

    untrusted {
        /* define OCALLs here. */
		void ocall_print_string([in, string] const char *str);
    };
};
